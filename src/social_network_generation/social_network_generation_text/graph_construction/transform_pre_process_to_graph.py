#
# This file is part of social_network_miner_compliance_check.
#
# social_network_miner_compliance_check is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# social_network_miner_compliance_check is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with social_network_miner_compliance_check (file COPYING in the main directory). If not, see
# http://www.gnu.org/licenses/.

"""
This file provides methods that transforms the pre-processed json document generated by the LLM to a graph data structure.
"""

import json


def create_graph(json_file_path: str):
    graph_list = __graph_construction_algorithm(json_file_path=json_file_path)
    return graph_list


def __graph_construction_algorithm(json_file_path):
    # Output list:
    graph_list = []
    # Lists from LLM output
    resource_list, activity_list, control_flow_list = __get_lists_from_json(json_file_path=json_file_path)

    # Counter that checks if the last event is the terminating one
    value_counter = 0
    # Edge List
    edge_list = []
    # All resources are added to the node list:
    node_list = [node['actor_id'] for node in resource_list]

    # Iterate through control_flow_list:
    for value_in_control_flow in control_flow_list:

        # Control_flow_information:
        # Get from_activity
        activity_from = value_in_control_flow['activity_from']
        # Get resource_performer
        resource_performer = value_in_control_flow['actor_performer']
        # Get resource_consumer
        resource_consumer = value_in_control_flow['actor_receiver']
        # Get activity_to
        activity_to = value_in_control_flow['activity_to']
        # Get terminating_activity value
        terminating_value = value_in_control_flow['terminating_activity']

        # Add connection to edge
        if resource_performer is not None and resource_consumer is not None:
            edge_list.append((resource_performer, resource_consumer, activity_from))

        # Process terminated after condition:
        if terminating_value and value_counter != len(control_flow_list) - 1:
            # Create new nodes
            new_nodes = __check_node_list(nodes=node_list, edges=edge_list)
            # Create new list edges that store all edges till the termination: Important, copy all elements
            new_edges = [edge for edge in edge_list]
            # Add valid process communication to graph list
            graph_list.append((new_nodes, new_edges))

            # Remove terminating activity and continue with old edge structure:
            edge_list.remove((resource_performer, resource_consumer, activity_from))
            # All resources are added to the node list:
            node_list = [node['actor_id'] for node in resource_list]

        # Process is finished after the last value in the control flow was checked
        if terminating_value and value_counter == len(control_flow_list) - 1:
            new_nodes = __check_node_list(nodes=node_list, edges=edge_list)
            graph_list.append((new_nodes, edge_list))

        value_counter = value_counter + 1

    named_graph_list = __refine_graph_lists(graph_lists=graph_list,
                                            activity_list=activity_list,
                                            resource_list=resource_list)
    return named_graph_list


# This method takes as input the graphs and rename the nodes and edges from ids the meaning full names
def __refine_graph_lists(graph_lists: list, activity_list: list, resource_list: list):
    new_graph_list = []
    for graph in graph_lists:
        renamed_nodes = []
        renamed_edges = []
        nodes = graph[0]
        edges = graph[1]

        # Nodes:
        for node in nodes:
            for resource in resource_list:
                if node == resource['actor_id']:
                    renamed_nodes.append(resource['actor_name'])

        # Edge Values
        for edge in edges:
            resource_performer = ""
            resource_consumer = ""
            activity_name = ""
            for resource in resource_list:
                if edge[0] == resource['actor_id']:
                    resource_performer = resource['actor_name']
                if edge[1] == resource['actor_id']:
                    resource_consumer = resource['actor_name']
            for activity in activity_list:
                if edge[2] == activity["activity_id"]:
                    activity_name = activity["activity_name"]

            renamed_edges.append((resource_performer, resource_consumer, activity_name))

        new_graph_list.append((renamed_nodes, renamed_edges))

    return new_graph_list


def __check_node_list(nodes: list, edges: list):
    refined_node_list = []

    # Get resources in edges
    nodes_in_edges = []
    for edge in edges:
        nodes_in_edges.append(edge[0])
        nodes_in_edges.append(edge[1])

    for node in nodes:
        if node in nodes_in_edges:
            refined_node_list.append(node)

    return refined_node_list


def __get_lists_from_json(json_file_path: str):
    # Get Json
    with open(json_file_path) as json_file:
        pre_processed_description = json.load(json_file)

    # Get pre-processed textual_description data
    resource_list = pre_processed_description["actors"]
    activity_list = pre_processed_description["activities"]
    control_flow_list = pre_processed_description["control_flow"]

    return resource_list, activity_list, control_flow_list
